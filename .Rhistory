install.packages("tidyverse")
install.packages("mangoTraining")
# Needed packages
library("rgbif")
install.packages("rgbif")
install.packages("rgeos")
install.packages("sp")
install.packages("rworldmap")
scientific.Name = "Chironectes minimus"
gbif.species <- occ_search(scientificName = scientific.Name, limit = 100)
gbifmap(gbif.species$data)
# Needed packages
library("rgbif")
library("rgeos")
library("sp")
library("rworldmap")
scientific.Name = "Chironectes minimus"
gbif.species <- occ_search(scientificName = scientific.Name, limit = 100)
gbifmap(gbif.species$data)
coordinates <- na.omit(gbif.species$data[,c('decimalLongitude','decimalLatitude')])
coordinates(coordinates) <- ~decimalLongitude + decimalLatitude
C.hull <- gConvexHull(coordinates)
proj4string(C.hull) <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
world <- getMap(resolution="low")
plot(world)
plot(coordinates, add=T, pch=1, col=2)
plot(C.hull, add=T, lwd=2)
# functions in a case when hull intersect more than one polygon (country)
inter.poly <- gIntersects(world, C.hull, byid = TRUE)
inter.list <- lapply(which(inter.poly), function(i){gIntersection(world[i,], C.hull)})
inter.fin <- SpatialPolygons(lapply(1:length(inter.list),
function(i) {Poly <- slot(inter.list[[i]], "polygons")[[1]]
slot(Poly, "ID") <- as.character(i); Poly}))
plot(inter.fin)
install.packages("dismo")
mul <- function(a, b) {
a * c # try to figure out why it doesn't work!
}
mul
test_that("test for associativity of multiplication", {
a <- runif(1, 0, 10000)
b <- runif(1, 0, 10000)
c <- runif(1, 0, 10000)
expect_equal(mul(a, b), a * b)
expect_equal(mul(mul(a, b), c), a * b * c)
expect_equal(mul(a, mul(b, c)), a * b * c)
})
a <- runif(1, 0, 10000)
b <- runif(1, 0, 10000)
c <- runif(1, 0, 10000)
expect_equal(mul(a, b), a * b)
expect_equal(mul(mul(a, b), c), a * b * c)
expect_equal(mul(a, mul(b, c)), a * b * c)
mul <- function(a, b) {
a * b # try to figure out why it doesn't work!
}
a <- runif(1, 0, 10000)
b <- runif(1, 0, 10000)
c <- runif(1, 0, 10000)
expect_equal(mul(a, b), a * b)
mul(2,3)
find_short <- function(s){
# Your code here
}
x <- "Hello World"
x
length(x)
list(x)
y<- list(x)
y
length(y)
strsplit(x)
x <- "Hello World"
x
strsplit(x)
?strsplit
strsplit(x, split)
strsplit(x, split="")
getMethod("strsplit")
stats:::strsplit
stats:::.strsplit
strsplit
y<-strsplit(x, split="")
lenght(y)
length(y)
nchar(x)
explode
str_word_count
preg_split
nchar(x)
unlist(x)
list(x)
strsplit(x, " ")
unlist(strsplit(x, " "))
y<-unlist(strsplit(x, " "))
nchar(y)
max(nchar(y))
length
max
strsplit
find_short <- function(s){
x <- unlist(strsplit(s, " "))
min(nchar(x))
# Your code here
}
find_short(x)
d[order(d$count),]
names<- c("Jane",  "Bob", "joy")
count <- c(8.3,1)
d<- data.frame(name,count)
d[order(d$count),]
name<- c("Jane",  "Bob", "joy")
count <- c(8.3,1)
d<- data.frame(name,count)
count
name<- c("Jane",  "Bob", "joy")
count <- c(8,3,1)
d<- data.frame(name,count)
d[order(d$count),]
order(d$count)
d[,order(d$count)]
d[order(d$count)]
d[order(d$count),]
order(c(5,10,1))
order(c(1,2,3))
order(c(10,1,5))
?order
name<- c("Jane",  "Bob", "joy")
count <- c(8,3,1)
d<- data.frame(name,count)
d[1,]
d[2,]
d[3,]
d[,1]
d[,2]
df<- data.frame(a=1:4, b=5:8)
df<- data.frame(a=1:4, b=5:8)
df[,1]>3
df[,1]>2
install.packages("iNZightPlots")
install.packages("RWeka")
knitr::opts_chunk$set(echo = TRUE)
gender <- factor(c("MALE", "FEMALE", "MALE"))
gender
setwd("C:/Users/Karin/Desktop/MachineLearning/Machine-Learning")
